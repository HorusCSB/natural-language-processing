Performance image processing algorithms TensorFlow Damir Demirović , Emir Skejić , Amira Šerifović-Trbalić University Tuzla , Faculty Electrical Engineering , Franjevačka 2 , 75000 Tuzla , Bosnia Herzegovina damir.demirovic @ untz.ba , emir.skejic @ untz.ba AbstractSignal , image Synthetic Aperture Radar imagery algorithms recent time used daily routine . Due huge data complexity , processing almost impossible real time . Often image processing algorithms inherently parallel nature , fit nicely parallel architectures multicore Central Processing Unit ( CPU ) Graphics Processing Unit GPUs . paper image processing algorithms evaluated , capable execute parallel manner several platforms CPU GPU . algorithms tested TensorFlow , novel framework deep learning , also image processing . Relative speedups compared CPU given algorithms . TensorFlow GPU implementation outperform multi-core CPUs tested algorithms , obtained speedups range 3.6 15 times . Keywords–image processing ; tensorflow ; parallel processing ; central processing unit ; graphics processing unit ; I. NTRODUCTION Google TensorFlow [ 1 ] platform building models machine learning . 's mostly used developing neural networks.In last time fast-growing community field deep learning networks [ 3 ] , [ 6 ] , focus training inference besides compelling fields used , like optimization , image processing , etc . done modular extensible design , n't limit developer specific applications . TensorFlow open- source software capable work heterogeneous environment consisting multicore Central Processing Unit ( CPU ) , Graphics Processing Unit ( GPU ) desktop , server mobile devices Tensor Processing Unit ( TPU ) production data centers . TensorFlow C++ based deep learning framework along Python APIs developed open sourced open source Apache 2.0 license Google recently . basic unit TensorFlow computational graph , consists nodes , operations , edges represent tensors . Tensors arbitrary dimensional arrays , i.e . high order generalization matrix vector . node take multiple inputs give multiple outputs , tensors passed one node another . TensorFlow uses two types tensors : placeholders variables . edges control flow computation . TensorFlow uses sessions graph computations . computational graph beginning empty variables . session interprets usercommands initialize variables build computational graph . Afterwards , run computational graph . TensorFlow determines order computation graph creating queue nodes without dependencies . program executes nodes queue order ensure decreasing unresolved dependencies whole graph computed . Parallelization done manner node assigned device computation rather running whole graph parallel multiple devices . real execution , TensorFlow runs simulation graph determine long take compute determine computation order , assigns nodes devices depending whether kernel used used operation device . fact , operations GPU implementation . support exists wider variety processor non- processor architectures . TensorFlow uses abstract interface vendors implement hardware backends , domain specific compilers linear algebra , etc . Support GPU exists specific NVIDIA cards , using related version CUDA toolkit [ 8 ] . TensorFlow runs platform supports 64- bit Python development environment . core TensorFlow implemented C++ programming language , however main language Python , several communities vendor-developed third- party TensorFlow bindings programming languages C # , Julia , Rust , Scala , etc . several benefits using TensorFlow computational graph model , simple-to- use Application Programming Interface ( API ) , flexible architecture , distributed processing performance . [ 7 ] authors evaluated five software frameworks deep learning architectures , i.e . extensibility , hardware utilization speed . tested algorithms single machine multi-threaded CPU GPU . find TensorFlow , albeit flexible performance single GPU competitive studied frameworks . [ 2 ] authors make comparative study state-of-the- art GPU-accelerated deep learning software training neural network , using two CPU two GPU platforms , distributed versions multiple GPUs . finding general TensorFlow relatively better scalability compared tools . Also GPU platform much better efficiency many-core CPU . paper performance TensorFlow implementation basic algorithms used image processing Authorized licensed use limited : UNIVERSIDADE ESTADUAL DE MARINGA . Downloaded February 27,2024 00:47:57 UTC IEEE Xplore . Restrictions apply .
evaluated CPU GPU . evaluated several algorithms implemented TensorFlow CPU GPU relevant image processing : convolution , linear algebra , partial differential equations , image operations like gradient calculation , edge detection , filtering , image transformation segmentation . II . METHODS Parallel processing last time become dominant high-performance computing . amount data signal , image Synthetic Aperture Radar imagery processing constantly rises . GPUs originally designed computer graphics , today used parallel processing [ 4 ] , [ 5 ] . viable alternative CPUs time-consuming tasks . Today , two dominant parallel computing platforms NVIDIA CUDA OpenCL . software frameworks writing programs run across heterogenous platforms like CPUs , GPUs digital signal processors ( DSP ) field- programmable gate arrays ( FPGA ) . purpose benchmarking , work used implementation two input data sets algorithms , smaller bigger . A. Convolution one use convolution image processing edge detection . done use kernel , mask , usually square matrix odd size . 2-D 3- convolution implemented following parameters . 2-D image 256x256 pixels , kernel size 5x5 bigger input image size 4096x4096 kernel size 11x11 . 3-D , image size 64x64x64 kernel 5x5x5 image size 128x128x128 kernel size 7x7x7 . B . Edge detection Edge detection often first step image preprocessing , usually lower stage image recognition . vast methods image detection . work implemented simple methods like image gradient convolution complex Canny filter . experiments edge detection input images 512 x 512 2048 x 2048 bigger data set . 1 ) Image gradient Image gradient one kind simpler edge detection methods . image gradient represents directional change intensity color image calculated convolution kernel size 3 x 3 directions . 2 ) Canny filter Another robust method edge detection Canny algorithm , multi-stage edge detector used extract useful structural information . C. Gaussian filtering often-used method reducing Gaussian noise images , mathematically convolution Gaussian kernel . Gaussian smoothing one simple preprocessing methods suppressing noise images , produces reduced image details . Gaussian kernel used sidelength size 5 pixels standard deviation 1 . Input images size 512 x 512 2048 x 2048 bigger data set . D. Matrix multiplication Matrices crucial image representation . Simple image transformations treated matrix operations . Two integer matrices used 1000x1000 11000x11000 . E. Image resize image interpolation guesses intensity values missing location , usingneighbor ’ sintensity values known . useful , example , image scaling . purpose work , 2D implementation bicubic bilinear interpolation carried . Bicubic interpolation bilinear interpolation extension linear interpolation interpolating functions two variables . idea perform interpolation one direction , another direction . experiments , evaluation made image sizes 2048x2048 4096x4096 . F. Image segmentation K-means well-known method clustering , image processing used segmentation . implemented versions K-means segmentan image 4 clusters , image size 100x100 pixels , 10000 elements , bigger data size 3162 x 3162 pixels approximately 1000000 pixels . G. Image deblurring Deblurring important task image restoration . 's process deconvolution , usually treated frequency domain , implementation used work uses deconvolution spatial domain . algorithm uses original image , blurred image produce restored image . Deblurring done using convolution matrix . Deblurring seen process optimization reducing sum square errors blurred version final image . optimization , gradient descent optimizer used , learning parameter experiments . Input images smaller bigger data set 512x512 2048x2048 , respectively . H. Image rotation image rotation , angle 45 degrees used data sets , using transformation matrix nearest interpolation method . . Partial differential equation Partial differential equation ( PDE ) used image processing image smoothing . evaluation discretized 2-D heat equation used , first image size 512 x 512 , 2048 x 2048 , keeping parameters k represent time step damping , respectively . III . RESULTS experiments performed single machine running 64-bit GNU/Linux two-core Intel ( R ) Xeon ( R ) CPU @ Authorized licensed use limited : UNIVERSIDADE ESTADUAL DE MARINGA . Downloaded February 27,2024 00:47:57 UTC IEEE Xplore . Restrictions apply .
2.30GHz 2 processors , GPU Tesla K80 ( Table ) . experiments use algorithms given Table II . Speedups expressed relatively CPU , speedup one . table , columns 1 2 represent smaller bigger input size , respectively . TABLE SPECIFICATION CPU GPU USED EXPERIMENTS Processor CPU GPU Number cores 2 2 x 2496 Max clock frequency3.0 GHz 875 MHz Global memory size 46080 kB 2 x 12 GB Power rating 95 W 300W TABLE II EXECUTION TIMES ( NSECONDS ) LLEXPERIMENTS DATASET 1AND2 Algorithm GPU CPU 1 2 1 2 Canny filter 0.81 1.03 0.38 5.65 Image deblurring 0.77 8.20 2,75 33.68 Gaussian filter 0.46 1.94 0.10 1.53 Gradient filter 0.47 180 0.10 1.33 Kmeans segmentation 0.52 3.56 0.29 53.35 Matrix multiplication 0.46 188 0.70 193 Bicubic image resize 0.60 0.40 0.88 0.12 Bilateral image resize 0.38 1.71 0.07 1.09 Image rotation 0.37 0.42 0.03 2.29 2-D image convolution 0.03 20.88 0.02 20.63 3-D image convolution 0.92 19.66 0.67 18.84 PDE - Heat equation 0.77 0.66 0.28 4.50 seen smaller data size CPU outperforms GPU cases , i.e . data size adapted well GPU . bigger input data , GPU gave better performance especially algorithms : rotation image , deblurring Canny edge detection , PDE . Figure 1 shows speedups obtained smaller data size , Figure 2 presents relative speedup bigger data set . smaller bigger data set highest speedup 3.6 times , 15 times respectively , bigger data set lowest speedup 0.1 0.3 , respectively . Three algorithms smaller dataset gain speedups : bicubic resize matrix multiplication deblur . obtained results see five algorithms bigger data set gain speedups : PDE , image rotation , K- means , deblur Canny . Deblur algorithm speedups datasets . Also , K-means gain highest speed bigger data size . Poor performance using gradient Gaussian smoothing fact due small kernel size suitable execution GPU.From experiments expect significant improvements GPU using CUDA , example [ 4 ] [ 5 ] . one possibility overcome problem would using cluster TensorFlow servers , separate operation carried different machines distributed manner . IV . CONCLUSION work , image processing algorithms evaluated different parallel processing units using TensorFlow platform . Almost tested algorithms get speed gain using parallelization GPU . TensorFlow implementation CPU GPU used , according research running times highly depend input data size . obtained results GPU speedups expected algorithms 3.6 times 15 times . computation smaller data set obtain lower speedups due fact TensorFlow handling computation , i.e . node assigned device computation rather running whole graph parallel multiple devices . Future research investigate performance gain using distributed TensorFlow investigate possible optimizations GPU . V. ACKNOWLEDGEMENT authors express gratitude NATO SPS Programme support presented work provided project grant NATO SPS 985208 . REFERENCES [ 1 ] M. Abadi , P. Barham , J. Chen , all. “ TensorFlow : system large- scale machine learning ” . InProceedings 12th USENIX conference Operating Systems Design Implementation ( OSDI'16 ) . USENIX Association , Berkeley , CA , USA , 265-283. , 2016 . [ 2 ] S. Shi , Q. Wang , P. Xu X. Chu , `` Benchmarking State-of-the-Art Deep Learning Software Tools , '' 2016 7th International Conference Cloud Computing Big Data ( CCBD ) , Macau , 2016 , pp . 99-104 . [ 3 ] Y. Kochura , S. Stirenko , O. Alienin , M. Novotarskiy Y. Gordienko , '' Comparative analysis open source frameworks machine learning use case single-threaded multi-threaded modes , '' 2017 12th International Scientific Technical Conference Computer Sciences Information Technologies ( CSIT ) , Lviv , 2017 , pp . 373-376 . [ 4 ] Z. Yang , Y. Zhu Y. Pu , `` Parallel Image Processing Based CUDA , '' 2008 International Conference Computer Science Software Engineering , Wuhan , Hubei , 2008 , pp . 198-201 . [ 5 ] I. K. Park , N. Singhal , M. H. Lee , S. Cho C. Kim , `` Design Performance Evaluation Image Processing Algorithms GPUs , '' IEEE Transactions Parallel Distributed Systems , vol . 22 , . 1 , pp . 91-104 , Jan. 2011 . [ 6 ] J. Lawrence , J . Malmsten , A. Rybka all. “ Comparing TensorFlow Deep Learning Performance Using CPUs , GPUs , Local PCs Cloud. ” 2017 . [ 7 ] S. Bahrampour , N. Ramakrishnan , L. Schott . M. Shah , M. Comparative Study Caffe , Neon , Theano , Torch Deep Learning “ . CoRR , abs/1511.06435 . 2015 . [ 8 ] CUDA , http : //docs.nvidia.com/cuda/ Authorized licensed use limited : UNIVERSIDADE ESTADUAL DE MARINGA . Downloaded February 27,2024 00:47:57 UTC IEEE Xplore . Restrictions apply .
Figure 1 Speedups smaller data sizes ( Table II ) Figure 2 Speedups bigger data sizes ( Table II ) 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0CannyDeblurGaussianGradientKmeansMatMulResize bic.Resize bil.Image rot.Conv 2DConv 3DPDE CPU GPU 0.0 2.0 4.0 6.0 8.0 10.0 12.0 14.0 16.0CannyDeblurGaussianGradientKmeansMatMulResize bic.Resize bil.Image rot.Conv 2DConv 3DPDE CPU GPU Authorized licensed use limited : UNIVERSIDADE ESTADUAL DE MARINGA . Downloaded February 27,2024 00:47:57 UTC IEEE Xplore . Restrictions apply .